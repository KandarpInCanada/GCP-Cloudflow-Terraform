name: Terraform Setup, Build, Push to GAR, and Deploy GKE

on:
  push:
    branches:
      - main

jobs:
  terraform-setup:
    name: "Setup Infrastructure with Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Google Cloud Credentials
        run: echo '${{ secrets.GCP_SA_KEY }}' > $HOME/gcp-sa-key.json

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ secrets.TF_BUCKET }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/gcp-sa-key.json

      - name: Check if GKE Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_NAME="myapp-gke-cluster"
          PROJECT_ID="${{ secrets.PROJECT_ID }}"
          LOCATION="us-central1-a"

          EXISTING_CLUSTER=$(gcloud container clusters list --project $PROJECT_ID --filter="name=$CLUSTER_NAME AND location=$LOCATION" --format="value(name)")

          if [ -n "$EXISTING_CLUSTER" ]; then
            echo "Cluster exists: $EXISTING_CLUSTER"
            echo "import_cluster=true" >> $GITHUB_ENV
          else
            echo "Cluster does not exist, it will be created."
            echo "import_cluster=false" >> $GITHUB_ENV
          fi

      - name: Import Existing Cluster if Found
        if: env.import_cluster == 'true'
        run: |
          cd terraform
          terraform import google_container_cluster.primary projects/${{ secrets.PROJECT_ID }}/locations/us-central1-a/clusters/myapp-gke-cluster
          terraform import google_container_node_pool.primary_nodes projects/${{ secrets.PROJECT_ID }}/locations/us-central1-a/clusters/myapp-gke-cluster/nodePools/myapp-node-pool
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/gcp-sa-key.json

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform
          terraform apply -auto-approve -input=false
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/gcp-sa-key.json

  build-push:
      name: "Build & Push Docker Images"
      needs: terraform-setup  # ✅ Runs only after Terraform completes
      runs-on: ubuntu-latest

      steps:
        # ✅ Step 1: Checkout Code
        - name: Checkout Code
          uses: actions/checkout@v3

        # ✅ Step 2: Authenticate with Google Cloud
        - name: Authenticate with Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}

        # ✅ Step 3: Configure Docker for Google Artifact Registry
        - name: Configure Docker for GAR
          run: |
            gcloud auth configure-docker us-central1-docker.pkg.dev

        # ✅ Step 4: Build Validator API Docker Image
        - name: Build Validator API Docker Image
          run: |
            docker build -t us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/myapp-repo/validator-api:$GITHUB_SHA \
            -f validator_api/Dockerfile validator_api/

        # ✅ Step 5: Push Validator API Docker Image
        - name: Push Validator API Docker Image
          run: |
            docker push us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/myapp-repo/validator-api:$GITHUB_SHA

        # ✅ Step 6: Build Processor API Docker Image
        - name: Build Processor API Docker Image
          run: |
            docker build -t us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/myapp-repo/processor-api:$GITHUB_SHA \
            -f processor_api/Dockerfile processor_api/

        # ✅ Step 7: Push Processor API Docker Image
        - name: Push Processor API Docker Image
          run: |
            docker push us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/myapp-repo/processor-api:$GITHUB_SHA

  deploy-gke:
    name: "Deploy to GKE"
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # ✅ Step 2: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # ✅ Step 3: Install Google Cloud SDK
      - name: Install Google Cloud SDK
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk

      # ✅ Step 4: Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      # ✅ Step 5: Configure kubectl to use gke-gcloud-auth-plugin
      - name: Configure kubectl to use gke-gcloud-auth-plugin
        run: |
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # ✅ Step 6: Connect to GKE Cluster
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials myapp-gke-cluster --zone us-central1-a

      # ✅ Step 7: Apply Kubernetes Resources
      - name: Apply Kubernetes Resources
        run: |
          # Apply namespace
          kubectl apply -f k8s/namespace.yaml

          # Apply persistent volume
          kubectl apply -f k8s/persistent-volume.yaml

          # Apply persistent volume claim
          kubectl apply -f k8s/persistent-volume-claim.yaml

          # Apply config map
          kubectl apply -f k8s/config-map.yaml

          # Apply validator-api deployment
          kubectl apply -f k8s/validator_api/validator-deployment.yaml

          # Apply processor-api deployment
          kubectl apply -f k8s/processor_api/processor-deployment.yaml